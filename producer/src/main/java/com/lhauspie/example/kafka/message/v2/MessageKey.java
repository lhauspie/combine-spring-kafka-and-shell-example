/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.lhauspie.example.kafka.message.v2;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class MessageKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6501456716179834036L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MessageKey\",\"namespace\":\"com.lhauspie.example.kafka.message\",\"fields\":[{\"name\":\"orgId\",\"type\":[\"null\",\"string\"]},{\"name\":\"objectId\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MessageKey> ENCODER =
      new BinaryMessageEncoder<MessageKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MessageKey> DECODER =
      new BinaryMessageDecoder<MessageKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MessageKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MessageKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MessageKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MessageKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MessageKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MessageKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MessageKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MessageKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence orgId;
  private CharSequence objectId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MessageKey() {}

  /**
   * All-args constructor.
   * @param orgId The new value for orgId
   * @param objectId The new value for objectId
   */
  public MessageKey(CharSequence orgId, CharSequence objectId) {
    this.orgId = orgId;
    this.objectId = objectId;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return orgId;
    case 1: return objectId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: orgId = (CharSequence)value$; break;
    case 1: objectId = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orgId' field.
   * @return The value of the 'orgId' field.
   */
  public CharSequence getOrgId() {
    return orgId;
  }


  /**
   * Sets the value of the 'orgId' field.
   * @param value the value to set.
   */
  public void setOrgId(CharSequence value) {
    this.orgId = value;
  }

  /**
   * Gets the value of the 'objectId' field.
   * @return The value of the 'objectId' field.
   */
  public CharSequence getObjectId() {
    return objectId;
  }


  /**
   * Sets the value of the 'objectId' field.
   * @param value the value to set.
   */
  public void setObjectId(CharSequence value) {
    this.objectId = value;
  }

  /**
   * Creates a new MessageKey RecordBuilder.
   * @return A new MessageKey RecordBuilder
   */
  public static MessageKey.Builder newBuilder() {
    return new MessageKey.Builder();
  }

  /**
   * Creates a new MessageKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MessageKey RecordBuilder
   */
  public static MessageKey.Builder newBuilder(MessageKey.Builder other) {
    if (other == null) {
      return new MessageKey.Builder();
    } else {
      return new MessageKey.Builder(other);
    }
  }

  /**
   * Creates a new MessageKey RecordBuilder by copying an existing MessageKey instance.
   * @param other The existing instance to copy.
   * @return A new MessageKey RecordBuilder
   */
  public static MessageKey.Builder newBuilder(MessageKey other) {
    if (other == null) {
      return new MessageKey.Builder();
    } else {
      return new MessageKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for MessageKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MessageKey>
    implements org.apache.avro.data.RecordBuilder<MessageKey> {

    private CharSequence orgId;
    private CharSequence objectId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(MessageKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orgId)) {
        this.orgId = data().deepCopy(fields()[0].schema(), other.orgId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.objectId)) {
        this.objectId = data().deepCopy(fields()[1].schema(), other.objectId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing MessageKey instance
     * @param other The existing instance to copy.
     */
    private Builder(MessageKey other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orgId)) {
        this.orgId = data().deepCopy(fields()[0].schema(), other.orgId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.objectId)) {
        this.objectId = data().deepCopy(fields()[1].schema(), other.objectId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'orgId' field.
      * @return The value.
      */
    public CharSequence getOrgId() {
      return orgId;
    }


    /**
      * Sets the value of the 'orgId' field.
      * @param value The value of 'orgId'.
      * @return This builder.
      */
    public MessageKey.Builder setOrgId(CharSequence value) {
      validate(fields()[0], value);
      this.orgId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orgId' field has been set.
      * @return True if the 'orgId' field has been set, false otherwise.
      */
    public boolean hasOrgId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orgId' field.
      * @return This builder.
      */
    public MessageKey.Builder clearOrgId() {
      orgId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectId' field.
      * @return The value.
      */
    public CharSequence getObjectId() {
      return objectId;
    }


    /**
      * Sets the value of the 'objectId' field.
      * @param value The value of 'objectId'.
      * @return This builder.
      */
    public MessageKey.Builder setObjectId(CharSequence value) {
      validate(fields()[1], value);
      this.objectId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'objectId' field has been set.
      * @return True if the 'objectId' field has been set, false otherwise.
      */
    public boolean hasObjectId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'objectId' field.
      * @return This builder.
      */
    public MessageKey.Builder clearObjectId() {
      objectId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MessageKey build() {
      try {
        MessageKey record = new MessageKey();
        record.orgId = fieldSetFlags()[0] ? this.orgId : (CharSequence) defaultValue(fields()[0]);
        record.objectId = fieldSetFlags()[1] ? this.objectId : (CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MessageKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<MessageKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MessageKey>
    READER$ = (org.apache.avro.io.DatumReader<MessageKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.orgId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.orgId);
    }

    if (this.objectId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.objectId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.orgId = null;
      } else {
        this.orgId = in.readString(this.orgId instanceof Utf8 ? (Utf8)this.orgId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.objectId = null;
      } else {
        this.objectId = in.readString(this.objectId instanceof Utf8 ? (Utf8)this.objectId : null);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orgId = null;
          } else {
            this.orgId = in.readString(this.orgId instanceof Utf8 ? (Utf8)this.orgId : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.objectId = null;
          } else {
            this.objectId = in.readString(this.objectId instanceof Utf8 ? (Utf8)this.objectId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










